// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/resume.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ResumeService_CreateResume_FullMethodName         = "/resume.ResumeService/CreateResume"
	ResumeService_ChangeResume_FullMethodName         = "/resume.ResumeService/ChangeResume"
	ResumeService_GetResumeByAccountId_FullMethodName = "/resume.ResumeService/GetResumeByAccountId"
	ResumeService_GetResumeById_FullMethodName        = "/resume.ResumeService/GetResumeById"
)

// ResumeServiceClient is the client API for ResumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResumeServiceClient interface {
	CreateResume(ctx context.Context, in *CreateResumeReq, opts ...grpc.CallOption) (*CreateResumeRes, error)
	ChangeResume(ctx context.Context, in *ChangeResumeReq, opts ...grpc.CallOption) (*ChangeResumeRes, error)
	GetResumeByAccountId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResumeByAccountIdRes, error)
	GetResumeById(ctx context.Context, in *GetResumeByIdReq, opts ...grpc.CallOption) (*GetResumeByIdRes, error)
}

type resumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResumeServiceClient(cc grpc.ClientConnInterface) ResumeServiceClient {
	return &resumeServiceClient{cc}
}

func (c *resumeServiceClient) CreateResume(ctx context.Context, in *CreateResumeReq, opts ...grpc.CallOption) (*CreateResumeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResumeRes)
	err := c.cc.Invoke(ctx, ResumeService_CreateResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) ChangeResume(ctx context.Context, in *ChangeResumeReq, opts ...grpc.CallOption) (*ChangeResumeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeResumeRes)
	err := c.cc.Invoke(ctx, ResumeService_ChangeResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) GetResumeByAccountId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResumeByAccountIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResumeByAccountIdRes)
	err := c.cc.Invoke(ctx, ResumeService_GetResumeByAccountId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) GetResumeById(ctx context.Context, in *GetResumeByIdReq, opts ...grpc.CallOption) (*GetResumeByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResumeByIdRes)
	err := c.cc.Invoke(ctx, ResumeService_GetResumeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResumeServiceServer is the server API for ResumeService service.
// All implementations must embed UnimplementedResumeServiceServer
// for forward compatibility
type ResumeServiceServer interface {
	CreateResume(context.Context, *CreateResumeReq) (*CreateResumeRes, error)
	ChangeResume(context.Context, *ChangeResumeReq) (*ChangeResumeRes, error)
	GetResumeByAccountId(context.Context, *emptypb.Empty) (*GetResumeByAccountIdRes, error)
	GetResumeById(context.Context, *GetResumeByIdReq) (*GetResumeByIdRes, error)
	mustEmbedUnimplementedResumeServiceServer()
}

// UnimplementedResumeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResumeServiceServer struct {
}

func (UnimplementedResumeServiceServer) CreateResume(context.Context, *CreateResumeReq) (*CreateResumeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResume not implemented")
}
func (UnimplementedResumeServiceServer) ChangeResume(context.Context, *ChangeResumeReq) (*ChangeResumeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeResume not implemented")
}
func (UnimplementedResumeServiceServer) GetResumeByAccountId(context.Context, *emptypb.Empty) (*GetResumeByAccountIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResumeByAccountId not implemented")
}
func (UnimplementedResumeServiceServer) GetResumeById(context.Context, *GetResumeByIdReq) (*GetResumeByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResumeById not implemented")
}
func (UnimplementedResumeServiceServer) mustEmbedUnimplementedResumeServiceServer() {}

// UnsafeResumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResumeServiceServer will
// result in compilation errors.
type UnsafeResumeServiceServer interface {
	mustEmbedUnimplementedResumeServiceServer()
}

func RegisterResumeServiceServer(s grpc.ServiceRegistrar, srv ResumeServiceServer) {
	s.RegisterService(&ResumeService_ServiceDesc, srv)
}

func _ResumeService_CreateResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).CreateResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_CreateResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).CreateResume(ctx, req.(*CreateResumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_ChangeResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeResumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).ChangeResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_ChangeResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).ChangeResume(ctx, req.(*ChangeResumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_GetResumeByAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GetResumeByAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_GetResumeByAccountId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GetResumeByAccountId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_GetResumeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResumeByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GetResumeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_GetResumeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GetResumeById(ctx, req.(*GetResumeByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResumeService_ServiceDesc is the grpc.ServiceDesc for ResumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resume.ResumeService",
	HandlerType: (*ResumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResume",
			Handler:    _ResumeService_CreateResume_Handler,
		},
		{
			MethodName: "ChangeResume",
			Handler:    _ResumeService_ChangeResume_Handler,
		},
		{
			MethodName: "GetResumeByAccountId",
			Handler:    _ResumeService_GetResumeByAccountId_Handler,
		},
		{
			MethodName: "GetResumeById",
			Handler:    _ResumeService_GetResumeById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/resume.proto",
}
