// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/authService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SSOServerService_SignUp_FullMethodName         = "/pb.SSOServerService/SignUp"
	SSOServerService_Login_FullMethodName          = "/pb.SSOServerService/Login"
	SSOServerService_VerifyToken_FullMethodName    = "/pb.SSOServerService/VerifyToken"
	SSOServerService_Logout_FullMethodName         = "/pb.SSOServerService/Logout"
	SSOServerService_RotateTokens_FullMethodName   = "/pb.SSOServerService/RotateTokens"
	SSOServerService_ChangePassword_FullMethodName = "/pb.SSOServerService/ChangePassword"
	SSOServerService_ChangeEmail_FullMethodName    = "/pb.SSOServerService/ChangeEmail"
)

// SSOServerServiceClient is the client API for SSOServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOServerServiceClient interface {
	SignUp(ctx context.Context, in *Account, opts ...grpc.CallOption) (*PairTokens, error)
	Login(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*PairTokens, error)
	VerifyToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RotateTokens(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*PairTokens, error)
	ChangePassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*PairTokens, error)
	ChangeEmail(ctx context.Context, in *NewEmail, opts ...grpc.CallOption) (*PairTokens, error)
}

type sSOServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOServerServiceClient(cc grpc.ClientConnInterface) SSOServerServiceClient {
	return &sSOServerServiceClient{cc}
}

func (c *sSOServerServiceClient) SignUp(ctx context.Context, in *Account, opts ...grpc.CallOption) (*PairTokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PairTokens)
	err := c.cc.Invoke(ctx, SSOServerService_SignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServerServiceClient) Login(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*PairTokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PairTokens)
	err := c.cc.Invoke(ctx, SSOServerService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServerServiceClient) VerifyToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, SSOServerService_VerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServerServiceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SSOServerService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServerServiceClient) RotateTokens(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*PairTokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PairTokens)
	err := c.cc.Invoke(ctx, SSOServerService_RotateTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServerServiceClient) ChangePassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*PairTokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PairTokens)
	err := c.cc.Invoke(ctx, SSOServerService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServerServiceClient) ChangeEmail(ctx context.Context, in *NewEmail, opts ...grpc.CallOption) (*PairTokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PairTokens)
	err := c.cc.Invoke(ctx, SSOServerService_ChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOServerServiceServer is the server API for SSOServerService service.
// All implementations must embed UnimplementedSSOServerServiceServer
// for forward compatibility
type SSOServerServiceServer interface {
	SignUp(context.Context, *Account) (*PairTokens, error)
	Login(context.Context, *LoginData) (*PairTokens, error)
	VerifyToken(context.Context, *Token) (*VerifyTokenResponse, error)
	Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	RotateTokens(context.Context, *RefreshToken) (*PairTokens, error)
	ChangePassword(context.Context, *NewPassword) (*PairTokens, error)
	ChangeEmail(context.Context, *NewEmail) (*PairTokens, error)
	mustEmbedUnimplementedSSOServerServiceServer()
}

// UnimplementedSSOServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSOServerServiceServer struct {
}

func (UnimplementedSSOServerServiceServer) SignUp(context.Context, *Account) (*PairTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedSSOServerServiceServer) Login(context.Context, *LoginData) (*PairTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSSOServerServiceServer) VerifyToken(context.Context, *Token) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedSSOServerServiceServer) Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSSOServerServiceServer) RotateTokens(context.Context, *RefreshToken) (*PairTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateTokens not implemented")
}
func (UnimplementedSSOServerServiceServer) ChangePassword(context.Context, *NewPassword) (*PairTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedSSOServerServiceServer) ChangeEmail(context.Context, *NewEmail) (*PairTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedSSOServerServiceServer) mustEmbedUnimplementedSSOServerServiceServer() {}

// UnsafeSSOServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOServerServiceServer will
// result in compilation errors.
type UnsafeSSOServerServiceServer interface {
	mustEmbedUnimplementedSSOServerServiceServer()
}

func RegisterSSOServerServiceServer(s grpc.ServiceRegistrar, srv SSOServerServiceServer) {
	s.RegisterService(&SSOServerService_ServiceDesc, srv)
}

func _SSOServerService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServerServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOServerService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServerServiceServer).SignUp(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOServerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOServerService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServerServiceServer).Login(ctx, req.(*LoginData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOServerService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServerServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOServerService_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServerServiceServer).VerifyToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOServerService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServerServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOServerService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServerServiceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOServerService_RotateTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServerServiceServer).RotateTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOServerService_RotateTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServerServiceServer).RotateTokens(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOServerService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServerServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOServerService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServerServiceServer).ChangePassword(ctx, req.(*NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOServerService_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServerServiceServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOServerService_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServerServiceServer).ChangeEmail(ctx, req.(*NewEmail))
	}
	return interceptor(ctx, in, info, handler)
}

// SSOServerService_ServiceDesc is the grpc.ServiceDesc for SSOServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSOServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SSOServerService",
	HandlerType: (*SSOServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _SSOServerService_SignUp_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SSOServerService_Login_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _SSOServerService_VerifyToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SSOServerService_Logout_Handler,
		},
		{
			MethodName: "RotateTokens",
			Handler:    _SSOServerService_RotateTokens_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _SSOServerService_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _SSOServerService_ChangeEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/authService.proto",
}
